import time, requests, pandas as pd

DF1_PATH = "billboard_songs.csv"
OUT_PATH = "df2_itunes.csv"

def search_itunes(song, artist):
    term = f"{song} {artist}"
    url = "https://itunes.apple.com/search"
    params = {"term": term, "entity": "song", "limit": 1}
    try:
        r = requests.get(url, params=params, timeout=15)
        r.raise_for_status()
        j = r.json()
        if j.get("resultCount", 0) == 0:
            return {
                "match_ok": False,
                "trackId": None,
                "collectionName": None,
                "primaryGenreName": None,
                "releaseDate": None,
                "trackTimeMillis": None,
                "previewUrl": None,
                "trackViewUrl": None,
            }
        d = j["results"][0]
        return {
            "match_ok": True,
            "trackId": d.get("trackId"),
            "collectionName": d.get("collectionName"),
            "primaryGenreName": d.get("primaryGenreName"),
            "releaseDate": d.get("releaseDate"),
            "trackTimeMillis": d.get("trackTimeMillis"),
            "previewUrl": d.get("previewUrl"),
            "trackViewUrl": d.get("trackViewUrl"),
        }
    except Exception:
        return {
            "match_ok": False,
            "trackId": None,
            "collectionName": None,
            "primaryGenreName": None,
            "releaseDate": None,
            "trackTimeMillis": None,
            "previewUrl": None,
            "trackViewUrl": None,
        }

df1 = pd.read_csv(DF1_PATH)
records = []
for _, row in df1.iterrows():
    meta = search_itunes(row["Song"], row["Artist"])
    meta["Song"] = row["Song"]
    meta["Artist"] = row["Artist"]
    records.append(meta)
    time.sleep(0.1)   # be polite to API

df2 = pd.DataFrame(records, columns=[
    "Song","Artist","match_ok","trackId","collectionName",
    "primaryGenreName","releaseDate","trackTimeMillis",
    "previewUrl","trackViewUrl"
])
df2.to_csv(OUT_PATH, index=False)
print(df2.shape, "saved to", OUT_PATH)
